'=========================== Функции =========================='
# функции - именнованный блок кода, который может принимать аргументы и возвращать реузультат

def my_sum(x, y): # x, y - это параметры
    return x + y

res = my_sum(5, 2) # 5, 2 = аргументы
print(res)

res2 = my_sum(-12, 26)
print(res2)

def my_len(posl):
    count = 0
    for i in posl:
        count += 1
    return count

res1 = my_len([34, 1, 34, 2, 2]) # 5
res2 = my_len('hello world') # 11
res3 = my_len({12, 2, 32, 2, 12, 1}) # 4


'===================== Виды параметров =================='
# 1. обязательные 
# 2. необязательные 
# 3. с дефолтом (со значением по умолчанию)
# 4. *args - все позиционные аргументы, которые не попали в обязательные и с дефолтом
# 5. **kwargs - все лишние именнованные аргументы

def func_(x, y, z = 6):
    return x + y + z

func_(10, 5, 3)


'=================== Виды аргументов ==================='
# 1. позиционные (по позиции)
# 2. именованные (по названию (параметр = аргумент))

def add_or_add_10(num1, num2 = 10):
    return num1 + num2 

print(add_or_add_10(5, 2)) # 7
print(add_or_add_10(40)) # 50

def func(a, b = 10, *args, **kwargs):
    print(a)
    print(b)
    print(args)
    print(kwargs)

func(10) 
func(20, 30) # позиционные
func(b=30, a=40) # именованные
func(123, 123, 3, 12 )
func(40, 50, 60, 70, hello = 'hello world', hi = 'hi')


'==================== Lambda ====================='
# lambda - анонимная функция которая записывается в одну строку 

lambda_func = lambda x: x ** 10
print(lambda_func(5))

def func_(x):
    return x ** 10

print(func(5))